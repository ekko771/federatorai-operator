// Code generated by protoc-gen-go. DO NOT EDIT.
// source: alameda_api/v1alpha1/datahub/plannings/plannings.proto

package plannings

import (
	fmt "fmt"
	common "github.com/containers-ai/api/alameda_api/v1alpha1/datahub/common"
	resources "github.com/containers-ai/api/alameda_api/v1alpha1/datahub/resources"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ContainerPlanning struct {
	Name                    string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LimitPlannings          []*common.MetricData `protobuf:"bytes,2,rep,name=limit_plannings,json=limitPlannings,proto3" json:"limit_plannings,omitempty"`
	RequestPlannings        []*common.MetricData `protobuf:"bytes,3,rep,name=request_plannings,json=requestPlannings,proto3" json:"request_plannings,omitempty"`
	InitialLimitPlannings   []*common.MetricData `protobuf:"bytes,4,rep,name=initial_limit_plannings,json=initialLimitPlannings,proto3" json:"initial_limit_plannings,omitempty"`
	InitialRequestPlannings []*common.MetricData `protobuf:"bytes,5,rep,name=initial_request_plannings,json=initialRequestPlannings,proto3" json:"initial_request_plannings,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}             `json:"-"`
	XXX_unrecognized        []byte               `json:"-"`
	XXX_sizecache           int32                `json:"-"`
}

func (m *ContainerPlanning) Reset()         { *m = ContainerPlanning{} }
func (m *ContainerPlanning) String() string { return proto.CompactTextString(m) }
func (*ContainerPlanning) ProtoMessage()    {}
func (*ContainerPlanning) Descriptor() ([]byte, []int) {
	return fileDescriptor_36c6a4155f49dbb5, []int{0}
}

func (m *ContainerPlanning) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContainerPlanning.Unmarshal(m, b)
}
func (m *ContainerPlanning) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContainerPlanning.Marshal(b, m, deterministic)
}
func (m *ContainerPlanning) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerPlanning.Merge(m, src)
}
func (m *ContainerPlanning) XXX_Size() int {
	return xxx_messageInfo_ContainerPlanning.Size(m)
}
func (m *ContainerPlanning) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerPlanning.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerPlanning proto.InternalMessageInfo

func (m *ContainerPlanning) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContainerPlanning) GetLimitPlannings() []*common.MetricData {
	if m != nil {
		return m.LimitPlannings
	}
	return nil
}

func (m *ContainerPlanning) GetRequestPlannings() []*common.MetricData {
	if m != nil {
		return m.RequestPlannings
	}
	return nil
}

func (m *ContainerPlanning) GetInitialLimitPlannings() []*common.MetricData {
	if m != nil {
		return m.InitialLimitPlannings
	}
	return nil
}

func (m *ContainerPlanning) GetInitialRequestPlannings() []*common.MetricData {
	if m != nil {
		return m.InitialRequestPlannings
	}
	return nil
}

type PodPlanning struct {
	PlanningType         PlanningType               `protobuf:"varint,1,opt,name=planning_type,json=planningType,proto3,enum=containersai.alameda.v1alpha1.datahub.plannings.PlanningType" json:"planning_type,omitempty"`
	NamespacedName       *resources.NamespacedName  `protobuf:"bytes,2,opt,name=namespaced_name,json=namespacedName,proto3" json:"namespaced_name,omitempty"`
	ApplyPlanningNow     bool                       `protobuf:"varint,3,opt,name=apply_planning_now,json=applyPlanningNow,proto3" json:"apply_planning_now,omitempty"`
	AssignPodPolicy      *resources.AssignPodPolicy `protobuf:"bytes,4,opt,name=assign_pod_policy,json=assignPodPolicy,proto3" json:"assign_pod_policy,omitempty"`
	ContainerPlannings   []*ContainerPlanning       `protobuf:"bytes,5,rep,name=container_plannings,json=containerPlannings,proto3" json:"container_plannings,omitempty"`
	StartTime            *timestamp.Timestamp       `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              *timestamp.Timestamp       `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	TopController        *resources.TopController   `protobuf:"bytes,8,opt,name=top_controller,json=topController,proto3" json:"top_controller,omitempty"`
	PlanningId           string                     `protobuf:"bytes,9,opt,name=planning_id,json=planningId,proto3" json:"planning_id,omitempty"`
	TotalCost            float64                    `protobuf:"fixed64,10,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *PodPlanning) Reset()         { *m = PodPlanning{} }
func (m *PodPlanning) String() string { return proto.CompactTextString(m) }
func (*PodPlanning) ProtoMessage()    {}
func (*PodPlanning) Descriptor() ([]byte, []int) {
	return fileDescriptor_36c6a4155f49dbb5, []int{1}
}

func (m *PodPlanning) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodPlanning.Unmarshal(m, b)
}
func (m *PodPlanning) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodPlanning.Marshal(b, m, deterministic)
}
func (m *PodPlanning) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodPlanning.Merge(m, src)
}
func (m *PodPlanning) XXX_Size() int {
	return xxx_messageInfo_PodPlanning.Size(m)
}
func (m *PodPlanning) XXX_DiscardUnknown() {
	xxx_messageInfo_PodPlanning.DiscardUnknown(m)
}

var xxx_messageInfo_PodPlanning proto.InternalMessageInfo

func (m *PodPlanning) GetPlanningType() PlanningType {
	if m != nil {
		return m.PlanningType
	}
	return PlanningType_PT_UNDEFINED
}

func (m *PodPlanning) GetNamespacedName() *resources.NamespacedName {
	if m != nil {
		return m.NamespacedName
	}
	return nil
}

func (m *PodPlanning) GetApplyPlanningNow() bool {
	if m != nil {
		return m.ApplyPlanningNow
	}
	return false
}

func (m *PodPlanning) GetAssignPodPolicy() *resources.AssignPodPolicy {
	if m != nil {
		return m.AssignPodPolicy
	}
	return nil
}

func (m *PodPlanning) GetContainerPlannings() []*ContainerPlanning {
	if m != nil {
		return m.ContainerPlannings
	}
	return nil
}

func (m *PodPlanning) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *PodPlanning) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *PodPlanning) GetTopController() *resources.TopController {
	if m != nil {
		return m.TopController
	}
	return nil
}

func (m *PodPlanning) GetPlanningId() string {
	if m != nil {
		return m.PlanningId
	}
	return ""
}

func (m *PodPlanning) GetTotalCost() float64 {
	if m != nil {
		return m.TotalCost
	}
	return 0
}

type ControllerPlanning struct {
	PlanningType         PlanningType               `protobuf:"varint,1,opt,name=planning_type,json=planningType,proto3,enum=containersai.alameda.v1alpha1.datahub.plannings.PlanningType" json:"planning_type,omitempty"`
	CtlPlanningType      ControllerPlanningType     `protobuf:"varint,2,opt,name=ctl_planning_type,json=ctlPlanningType,proto3,enum=containersai.alameda.v1alpha1.datahub.plannings.ControllerPlanningType" json:"ctl_planning_type,omitempty"`
	CtlPlanningSpec      *ControllerPlanningSpec    `protobuf:"bytes,3,opt,name=ctl_planning_spec,json=ctlPlanningSpec,proto3" json:"ctl_planning_spec,omitempty"`
	CtlPlanningSpecK8S   *ControllerPlanningSpecK8S `protobuf:"bytes,4,opt,name=ctl_planning_spec_k8s,json=ctlPlanningSpecK8s,proto3" json:"ctl_planning_spec_k8s,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ControllerPlanning) Reset()         { *m = ControllerPlanning{} }
func (m *ControllerPlanning) String() string { return proto.CompactTextString(m) }
func (*ControllerPlanning) ProtoMessage()    {}
func (*ControllerPlanning) Descriptor() ([]byte, []int) {
	return fileDescriptor_36c6a4155f49dbb5, []int{2}
}

func (m *ControllerPlanning) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControllerPlanning.Unmarshal(m, b)
}
func (m *ControllerPlanning) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControllerPlanning.Marshal(b, m, deterministic)
}
func (m *ControllerPlanning) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerPlanning.Merge(m, src)
}
func (m *ControllerPlanning) XXX_Size() int {
	return xxx_messageInfo_ControllerPlanning.Size(m)
}
func (m *ControllerPlanning) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerPlanning.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerPlanning proto.InternalMessageInfo

func (m *ControllerPlanning) GetPlanningType() PlanningType {
	if m != nil {
		return m.PlanningType
	}
	return PlanningType_PT_UNDEFINED
}

func (m *ControllerPlanning) GetCtlPlanningType() ControllerPlanningType {
	if m != nil {
		return m.CtlPlanningType
	}
	return ControllerPlanningType_CPT_UNDEFINED
}

func (m *ControllerPlanning) GetCtlPlanningSpec() *ControllerPlanningSpec {
	if m != nil {
		return m.CtlPlanningSpec
	}
	return nil
}

func (m *ControllerPlanning) GetCtlPlanningSpecK8S() *ControllerPlanningSpecK8S {
	if m != nil {
		return m.CtlPlanningSpecK8S
	}
	return nil
}

func init() {
	proto.RegisterType((*ContainerPlanning)(nil), "containersai.alameda.v1alpha1.datahub.plannings.ContainerPlanning")
	proto.RegisterType((*PodPlanning)(nil), "containersai.alameda.v1alpha1.datahub.plannings.PodPlanning")
	proto.RegisterType((*ControllerPlanning)(nil), "containersai.alameda.v1alpha1.datahub.plannings.ControllerPlanning")
}

func init() {
	proto.RegisterFile("alameda_api/v1alpha1/datahub/plannings/plannings.proto", fileDescriptor_36c6a4155f49dbb5)
}

var fileDescriptor_36c6a4155f49dbb5 = []byte{
	// 667 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x96, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0xc7, 0x95, 0xa6, 0x4f, 0xdb, 0x6c, 0x9e, 0x26, 0xcd, 0xa2, 0x0a, 0x53, 0x09, 0x35, 0xea,
	0x29, 0x07, 0x58, 0xab, 0x41, 0x45, 0xe1, 0xc0, 0x5b, 0x03, 0x42, 0x50, 0xa8, 0x2a, 0xd3, 0x13,
	0x97, 0xd5, 0xc4, 0x5e, 0xd2, 0x15, 0xeb, 0xdd, 0xc5, 0xbb, 0xa1, 0xca, 0x81, 0x23, 0x1f, 0x92,
	0x23, 0xdf, 0x04, 0x79, 0x63, 0x3b, 0x71, 0x22, 0x95, 0x84, 0x54, 0xdc, 0xbc, 0x13, 0xcf, 0xff,
	0x37, 0x33, 0x3b, 0x33, 0x0e, 0x7a, 0x0c, 0x02, 0x62, 0x16, 0x01, 0x05, 0xcd, 0xfd, 0x6f, 0xc7,
	0x20, 0xf4, 0x15, 0x1c, 0xfb, 0x11, 0x58, 0xb8, 0x1a, 0x0d, 0x7c, 0x2d, 0x40, 0x4a, 0x2e, 0x87,
	0x66, 0xfa, 0x44, 0x74, 0xa2, 0xac, 0xc2, 0x7e, 0xa8, 0xa4, 0x05, 0x2e, 0x59, 0x62, 0x80, 0x93,
	0x4c, 0x84, 0xe4, 0x02, 0x24, 0x13, 0x20, 0x85, 0xdb, 0xc1, 0xf1, 0x8d, 0xa0, 0x50, 0xc5, 0xb1,
	0x92, 0x7e, 0xcc, 0x6c, 0xc2, 0xc3, 0x8c, 0x71, 0xd0, 0x5d, 0x32, 0x36, 0x3b, 0xd6, 0x2c, 0xf7,
	0x39, 0xb9, 0xd1, 0x27, 0x61, 0x46, 0x8d, 0x92, 0x90, 0x99, 0x94, 0x04, 0xa9, 0x75, 0x45, 0x37,
	0xad, 0x04, 0x0f, 0x39, 0x5b, 0x2e, 0xc2, 0xa9, 0xdb, 0x6c, 0x84, 0x87, 0x43, 0xa5, 0x86, 0x82,
	0xf9, 0xee, 0x34, 0x18, 0x7d, 0xf6, 0x2d, 0x8f, 0x99, 0xb1, 0x10, 0xeb, 0xc9, 0x0b, 0x47, 0x3f,
	0xab, 0xa8, 0xd5, 0xcf, 0xab, 0x7b, 0x91, 0x65, 0x89, 0x31, 0xda, 0x94, 0x10, 0x33, 0xaf, 0xd2,
	0xae, 0x74, 0x6a, 0x81, 0x7b, 0xc6, 0x80, 0x9a, 0x82, 0xc7, 0xdc, 0xd2, 0xa2, 0x16, 0xde, 0x46,
	0xbb, 0xda, 0xa9, 0x77, 0x7b, 0x64, 0xb9, 0xeb, 0x99, 0x94, 0x9d, 0x7c, 0x70, 0x65, 0x7f, 0x05,
	0x16, 0x82, 0x86, 0x13, 0xcc, 0xa9, 0x06, 0x33, 0xd4, 0x4a, 0xd8, 0xd7, 0x11, 0x33, 0xb3, 0x90,
	0xea, 0x9a, 0x90, 0xbd, 0x4c, 0x72, 0x8a, 0xd1, 0xe8, 0x2e, 0x97, 0xdc, 0x72, 0x10, 0x74, 0x3e,
	0xa3, 0xcd, 0x35, 0x61, 0xfb, 0x99, 0xf0, 0xfb, 0x72, 0x62, 0x16, 0xdd, 0xcb, 0x89, 0x8b, 0x09,
	0xfe, 0xb7, 0x26, 0x33, 0x4f, 0x26, 0x98, 0xcb, 0xf3, 0xe8, 0xc7, 0x16, 0xaa, 0x5f, 0xa8, 0xa8,
	0xb8, 0xd5, 0x01, 0xda, 0xcd, 0xa9, 0x34, 0x6d, 0x12, 0x77, 0xbd, 0x8d, 0xee, 0x53, 0xb2, 0xe2,
	0x78, 0x91, 0x5c, 0xf1, 0x72, 0xac, 0x59, 0xf0, 0xbf, 0x9e, 0x39, 0xe1, 0x2b, 0xd4, 0x4c, 0xbb,
	0xc5, 0x68, 0x08, 0x59, 0x44, 0x5d, 0x13, 0x6d, 0xb4, 0x2b, 0x9d, 0x7a, 0xf7, 0xf9, 0x92, 0x94,
	0xa2, 0x8f, 0xc9, 0x79, 0xa1, 0x93, 0x3e, 0x05, 0x0d, 0x59, 0x3a, 0xe3, 0x07, 0x08, 0x83, 0xd6,
	0x62, 0x5c, 0x54, 0x92, 0x4a, 0x75, 0xed, 0x55, 0xdb, 0x95, 0xce, 0x4e, 0xb0, 0xe7, 0x7e, 0xc9,
	0xc3, 0x3c, 0x57, 0xd7, 0x58, 0xa0, 0x16, 0x18, 0xc3, 0x87, 0x92, 0x6a, 0x15, 0x51, 0x37, 0x59,
	0x63, 0x6f, 0xd3, 0x45, 0xf6, 0x62, 0xe5, 0xc8, 0x5e, 0x3a, 0xa5, 0xb4, 0xb4, 0x4e, 0x27, 0x68,
	0x42, 0xd9, 0x80, 0x0d, 0xba, 0x53, 0x68, 0x2e, 0xdc, 0xf4, 0xe9, 0xca, 0xf5, 0x5e, 0x18, 0xd0,
	0x00, 0x87, 0xf3, 0x26, 0x83, 0x9f, 0x20, 0x64, 0x2c, 0x24, 0x96, 0xa6, 0x33, 0xee, 0x6d, 0xb9,
	0xdc, 0x0e, 0xc8, 0x64, 0x01, 0x90, 0x7c, 0x01, 0x90, 0xcb, 0x7c, 0x01, 0x04, 0x35, 0xf7, 0x76,
	0x7a, 0xc6, 0x27, 0x68, 0x87, 0xc9, 0x68, 0xe2, 0xb8, 0xfd, 0x47, 0xc7, 0x6d, 0x26, 0x23, 0xe7,
	0xc6, 0x50, 0xc3, 0x2a, 0x4d, 0xd3, 0x58, 0x12, 0x25, 0x04, 0x4b, 0xbc, 0x1d, 0xe7, 0xfc, 0x6c,
	0xe5, 0x8a, 0x5e, 0x2a, 0xdd, 0x2f, 0x54, 0x82, 0x5d, 0x3b, 0x7b, 0xc4, 0x87, 0xa8, 0x5e, 0xdc,
	0x31, 0x8f, 0xbc, 0x9a, 0x5b, 0x4a, 0x28, 0x37, 0xbd, 0x8d, 0xf0, 0x7d, 0x84, 0xac, 0xb2, 0x20,
	0x68, 0xa8, 0x8c, 0xf5, 0x50, 0xbb, 0xd2, 0xa9, 0x04, 0x35, 0x67, 0xe9, 0x2b, 0x63, 0x8f, 0x7e,
	0x55, 0x11, 0x9e, 0xca, 0xfd, 0xd3, 0x71, 0x30, 0xa8, 0x15, 0x5a, 0x41, 0xcb, 0x9c, 0x0d, 0xc7,
	0x79, 0xf3, 0x57, 0x6d, 0x50, 0xce, 0xc1, 0x11, 0x9b, 0xa1, 0x15, 0x17, 0x37, 0x41, 0x8d, 0x66,
	0xa1, 0x1b, 0x8c, 0xfa, 0xad, 0x40, 0x3f, 0x6a, 0x16, 0x96, 0xa0, 0xa9, 0x01, 0x7f, 0x47, 0xfb,
	0x0b, 0x50, 0xfa, 0xa5, 0x67, 0xb2, 0x21, 0x7b, 0x77, 0x4b, 0xe0, 0xb3, 0x9e, 0x09, 0xf0, 0x1c,
	0xfb, 0xac, 0x67, 0x4e, 0x5f, 0x7f, 0xea, 0x0f, 0xb9, 0xcd, 0x16, 0xe4, 0xcc, 0xff, 0x85, 0x87,
	0xc0, 0xfd, 0xf4, 0x7b, 0xb9, 0xdc, 0xd7, 0x7d, 0xb0, 0xe5, 0xda, 0xfd, 0xd1, 0xef, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xdc, 0x68, 0xaa, 0x9f, 0xaa, 0x08, 0x00, 0x00,
}
