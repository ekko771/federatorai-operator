// Code generated by protoc-gen-go. DO NOT EDIT.
// source: alameda_api/v1alpha1/datahub/server.proto

package datahub

import (
	context "context"
	fmt "fmt"
	events "github.com/containers-ai/api/alameda_api/v1alpha1/datahub/events"
	gpu "github.com/containers-ai/api/alameda_api/v1alpha1/datahub/gpu"
	licenses "github.com/containers-ai/api/alameda_api/v1alpha1/datahub/licenses"
	metrics "github.com/containers-ai/api/alameda_api/v1alpha1/datahub/metrics"
	plannings "github.com/containers-ai/api/alameda_api/v1alpha1/datahub/plannings"
	predictions "github.com/containers-ai/api/alameda_api/v1alpha1/datahub/predictions"
	rawdata "github.com/containers-ai/api/alameda_api/v1alpha1/datahub/rawdata"
	recommendations "github.com/containers-ai/api/alameda_api/v1alpha1/datahub/recommendations"
	resources "github.com/containers-ai/api/alameda_api/v1alpha1/datahub/resources"
	scores "github.com/containers-ai/api/alameda_api/v1alpha1/datahub/scores"
	weavescope "github.com/containers-ai/api/alameda_api/v1alpha1/datahub/weavescope"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("alameda_api/v1alpha1/datahub/server.proto", fileDescriptor_debe19e3ad2e68a0)
}

var fileDescriptor_debe19e3ad2e68a0 = []byte{
	// 1221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x99, 0xcd, 0x8b, 0xe4, 0x44,
	0x18, 0xc6, 0xb7, 0x40, 0x44, 0xcb, 0x65, 0x5d, 0xa3, 0xee, 0x8c, 0x23, 0xcb, 0xc2, 0x80, 0x07,
	0x0f, 0x56, 0xb3, 0x5f, 0xca, 0x3a, 0x07, 0xb7, 0x7b, 0x7a, 0xb6, 0x67, 0xdc, 0x99, 0xb1, 0xed,
	0x5e, 0x5d, 0xf0, 0x03, 0xa9, 0x49, 0xde, 0xc9, 0x44, 0xd2, 0x49, 0x4c, 0x2a, 0xbd, 0x0c, 0x88,
	0x17, 0x15, 0xbc, 0x78, 0x10, 0x64, 0x3d, 0x0a, 0x0a, 0xc2, 0x22, 0x88, 0x20, 0x7a, 0x10, 0xd1,
	0xa3, 0xe0, 0xc9, 0x3f, 0xc0, 0x3f, 0x46, 0xd2, 0xa9, 0xaa, 0x7c, 0x74, 0xba, 0x3a, 0x5f, 0x42,
	0x7b, 0xd3, 0x49, 0x3f, 0xbf, 0xe7, 0xa9, 0xb7, 0xde, 0xaa, 0x4a, 0x65, 0xf1, 0xf3, 0xd4, 0xa6,
	0x13, 0x30, 0xe8, 0x7b, 0xd4, 0xb3, 0x3a, 0xd3, 0xcb, 0xd4, 0xf6, 0x4e, 0xe8, 0xe5, 0x8e, 0x41,
	0x19, 0x3d, 0x09, 0x8f, 0x3a, 0x01, 0xf8, 0x53, 0xf0, 0x89, 0xe7, 0xbb, 0xcc, 0xd5, 0x9e, 0xd3,
	0x5d, 0x87, 0x51, 0xcb, 0x01, 0x3f, 0xa0, 0x16, 0xe1, 0x3a, 0x22, 0x34, 0x84, 0x6b, 0x36, 0xae,
	0x28, 0x89, 0x30, 0x05, 0x87, 0x05, 0x33, 0xb0, 0xa5, 0x43, 0x10, 0xa3, 0x37, 0x3a, 0x4a, 0x8d,
	0xe9, 0x85, 0x79, 0xc1, 0x35, 0xa5, 0xc0, 0xb6, 0x74, 0x70, 0x02, 0x98, 0xb3, 0xb9, 0xaa, 0x54,
	0x4d, 0x80, 0xf9, 0x96, 0x3e, 0x27, 0xba, 0xae, 0x14, 0x79, 0x36, 0x75, 0x1c, 0xcb, 0x31, 0xe7,
	0x64, 0x2f, 0xa9, 0x65, 0x3e, 0x18, 0x96, 0xce, 0x2c, 0xd7, 0xa9, 0x18, 0xd2, 0xa7, 0xf7, 0xa2,
	0xff, 0xcc, 0x8b, 0xb6, 0xd4, 0x22, 0xd0, 0xdd, 0xc9, 0x04, 0x1c, 0x83, 0x16, 0x3a, 0x5e, 0x5f,
	0x22, 0x0e, 0xdc, 0xd0, 0xd7, 0xe7, 0xab, 0xa9, 0x9e, 0xe8, 0x40, 0x77, 0xfd, 0x79, 0xcd, 0x8b,
	0x4a, 0xcd, 0x3d, 0xa0, 0x53, 0x08, 0x74, 0xd7, 0x83, 0xbc, 0xee, 0x59, 0xd3, 0x75, 0x4d, 0x1b,
	0x3a, 0xb3, 0xff, 0x3b, 0x0a, 0x8f, 0x3b, 0x30, 0xf1, 0xd8, 0x29, 0x7f, 0xb8, 0xc6, 0x1f, 0xfa,
	0x9e, 0xde, 0x09, 0x18, 0x65, 0x21, 0x57, 0x5d, 0xf9, 0xf8, 0x06, 0x3e, 0xd7, 0x8f, 0xd9, 0xe3,
	0x98, 0xa7, 0x99, 0xf8, 0xec, 0xb6, 0x0f, 0x94, 0xc1, 0xce, 0xac, 0x11, 0xb5, 0x2e, 0x29, 0xd5,
	0xd5, 0x24, 0xee, 0x5b, 0x92, 0xd6, 0x8e, 0xe0, 0x83, 0x10, 0x02, 0xb6, 0xa1, 0x91, 0xd8, 0x9f,
	0xf8, 0x9e, 0x4e, 0xc6, 0x33, 0xff, 0xcd, 0x33, 0xda, 0x17, 0x08, 0xe3, 0x7d, 0x2b, 0x60, 0xdc,
	0xe7, 0x95, 0x6a, 0x3e, 0x89, 0x52, 0xb8, 0xdc, 0xac, 0x0f, 0x08, 0x3c, 0xd7, 0x09, 0x60, 0xf3,
	0x8c, 0xc6, 0xf0, 0x53, 0xf1, 0x00, 0x06, 0x5e, 0x38, 0x4c, 0x3a, 0x50, 0xbb, 0x55, 0x92, 0x6d,
	0x7a, 0x21, 0x29, 0x02, 0xa8, 0x2b, 0xf1, 0x29, 0xc2, 0x8f, 0x44, 0x71, 0x06, 0x5e, 0x18, 0x68,
	0x2f, 0x57, 0xb0, 0x12, 0x22, 0x81, 0xdf, 0xaa, 0xa5, 0x95, 0xa3, 0xff, 0x0a, 0xe1, 0x73, 0xfc,
	0xcf, 0x07, 0xf1, 0x52, 0xd7, 0x6e, 0x56, 0x27, 0x72, 0xa9, 0xc8, 0xd4, 0x6d, 0x40, 0x90, 0xc9,
	0xbe, 0x45, 0x58, 0xe3, 0x0f, 0xd3, 0xd3, 0xd2, 0xaf, 0xce, 0x2e, 0x98, 0x94, 0x9d, 0x86, 0x14,
	0x99, 0xf2, 0x7d, 0x8c, 0x07, 0xc0, 0xf6, 0xe3, 0xbd, 0x55, 0xbb, 0x20, 0xe6, 0x5a, 0x2c, 0x49,
	0xb2, 0x13, 0x2d, 0xc9, 0x8d, 0x5e, 0x49, 0x3b, 0xb1, 0x47, 0x93, 0x84, 0x99, 0xf2, 0xf2, 0xf0,
	0xf9, 0xb8, 0xd1, 0x86, 0xae, 0x21, 0x26, 0xab, 0x6c, 0x97, 0xf2, 0x7d, 0x9c, 0xe4, 0x01, 0xea,
	0x2e, 0xf5, 0xf1, 0x13, 0xb1, 0xe0, 0xd0, 0x35, 0x40, 0x58, 0x0e, 0x6a, 0x59, 0xa6, 0x08, 0x6a,
	0xcf, 0xaf, 0x79, 0x47, 0xa6, 0x06, 0xd9, 0xaf, 0xe8, 0x98, 0x95, 0x57, 0x9d, 0xf3, 0x45, 0x14,
	0x39, 0x0f, 0xdf, 0x20, 0xfc, 0x78, 0xf4, 0x30, 0x5d, 0x94, 0x3a, 0xf0, 0x82, 0x92, 0xdc, 0x6a,
	0x8a, 0x91, 0x21, 0xaf, 0xe1, 0x87, 0x86, 0x96, 0x63, 0x2e, 0x6c, 0xc9, 0xe2, 0xe2, 0x4f, 0xb1,
	0x26, 0x3b, 0x64, 0x28, 0x4e, 0x71, 0xed, 0xd5, 0x92, 0xa9, 0xe4, 0xb9, 0x4f, 0xe6, 0x21, 0xea,
	0x49, 0xff, 0x04, 0xe1, 0x67, 0x62, 0xcd, 0xb6, 0xeb, 0x30, 0xdf, 0xb5, 0x6d, 0xf0, 0x13, 0xff,
	0xd7, 0x6b, 0xfa, 0x17, 0xb0, 0xd4, 0x31, 0x1e, 0x20, 0x7c, 0x9e, 0x4f, 0x7b, 0xe2, 0xbe, 0x5b,
	0xd9, 0x3d, 0x8f, 0x10, 0xa6, 0x7b, 0x2d, 0x90, 0xe4, 0x04, 0xff, 0x8e, 0xf0, 0x5a, 0xf4, 0xb8,
	0xa8, 0x60, 0xaf, 0xd5, 0x32, 0x52, 0x94, 0x6b, 0xd8, 0x1e, 0x50, 0x0e, 0xe0, 0x23, 0xfc, 0x74,
	0xb2, 0x35, 0xa4, 0xb7, 0xf8, 0xd2, 0xe9, 0x13, 0x0d, 0x29, 0x24, 0xa9, 0x27, 0xfb, 0x43, 0x71,
	0xf0, 0x47, 0x05, 0x4e, 0xd9, 0x1f, 0xd6, 0xb6, 0xcf, 0x82, 0xd4, 0xee, 0xbf, 0x20, 0xfc, 0xa4,
	0x58, 0xbd, 0x69, 0xf7, 0x83, 0x1a, 0xee, 0x05, 0x1c, 0x61, 0x7e, 0xd8, 0x16, 0x4e, 0x4e, 0xdb,
	0x4f, 0xfc, 0x5c, 0xce, 0x55, 0x6d, 0xbf, 0xa6, 0x51, 0x71, 0xcd, 0x0e, 0x5a, 0xa2, 0xc9, 0xd4,
	0xf7, 0x11, 0x7e, 0x6c, 0x04, 0xd4, 0x18, 0xc5, 0x57, 0x85, 0xd2, 0xaf, 0xb8, 0xfc, 0x6a, 0x41,
	0x52, 0x5a, 0x91, 0xb1, 0xd7, 0x04, 0x21, 0x83, 0x9d, 0xe0, 0xb3, 0x77, 0x7d, 0x8b, 0x81, 0x08,
	0x56, 0x95, 0x9a, 0x16, 0xab, 0x3b, 0xee, 0x33, 0x84, 0xd7, 0x65, 0x9f, 0x8e, 0xb2, 0xb7, 0x1f,
	0xed, 0xcd, 0xb2, 0xb6, 0x59, 0x1d, 0x59, 0x04, 0x54, 0x47, 0xb9, 0x8f, 0xf0, 0xa5, 0xfc, 0x16,
	0x9d, 0x4f, 0xf4, 0x6e, 0xa3, 0x44, 0x0b, 0xb9, 0xea, 0x60, 0x7f, 0x22, 0x7c, 0x81, 0xf7, 0x51,
	0x3e, 0xcf, 0x9d, 0x9a, 0x79, 0x8a, 0x71, 0x22, 0xc6, 0x1b, 0x2d, 0x53, 0x65, 0x5f, 0xfd, 0x8d,
	0xf0, 0xa5, 0xe8, 0x47, 0xdd, 0x29, 0xb5, 0x6c, 0x7a, 0x64, 0xc3, 0xff, 0x7f, 0x48, 0xff, 0x20,
	0x7c, 0x31, 0x7b, 0xac, 0xe4, 0x07, 0xf4, 0x76, 0x03, 0xeb, 0xa5, 0x1d, 0xf3, 0xce, 0x7f, 0x03,
	0x97, 0xc3, 0xfb, 0x8b, 0x0f, 0x6f, 0x6c, 0x4d, 0x42, 0x9b, 0x32, 0x30, 0xc6, 0xfa, 0x09, 0x18,
	0xa1, 0x6d, 0x39, 0xe6, 0x78, 0xf6, 0xdd, 0x40, 0x1b, 0x95, 0x4c, 0x10, 0x7f, 0x66, 0x20, 0x4a,
	0x98, 0x18, 0xd5, 0xb8, 0x55, 0xa6, 0x1c, 0xcc, 0x31, 0xc6, 0x72, 0x6b, 0x08, 0xca, 0x6f, 0x6a,
	0xe2, 0xb3, 0x4a, 0xb2, 0xaf, 0x2c, 0x59, 0xb0, 0x4c, 0xdc, 0x50, 0x92, 0x0a, 0x07, 0xda, 0x5e,
	0x4d, 0xbb, 0x14, 0x43, 0xed, 0x2a, 0x5f, 0x93, 0xbb, 0x31, 0x3a, 0x3a, 0x2d, 0xcb, 0xbf, 0x26,
	0xe7, 0x6d, 0xd3, 0x90, 0xa5, 0x77, 0xa3, 0xd9, 0xcd, 0x83, 0x2b, 0x66, 0xb5, 0x1d, 0x54, 0x76,
	0xcd, 0x11, 0xaa, 0xde, 0xda, 0xb3, 0xa0, 0x98, 0x90, 0xbe, 0x1b, 0x9d, 0x4f, 0xf1, 0xe3, 0xc2,
	0xec, 0x36, 0x89, 0x98, 0x29, 0x4b, 0xaf, 0x16, 0x89, 0x23, 0x64, 0xc8, 0x2f, 0x11, 0x7e, 0x54,
	0xfe, 0x5d, 0xeb, 0x36, 0x61, 0xb6, 0x19, 0xeb, 0x3b, 0x3e, 0xbb, 0xe9, 0x56, 0xae, 0x37, 0xbb,
	0x05, 0x8d, 0xbc, 0xdb, 0x1c, 0x94, 0x0e, 0x2a, 0x5e, 0x01, 0x83, 0xde, 0x69, 0x34, 0x8c, 0x43,
	0x3a, 0x01, 0xed, 0x76, 0xed, 0x06, 0x4a, 0x20, 0xed, 0x76, 0xe3, 0x31, 0xc6, 0x7d, 0xb0, 0xa1,
	0xf6, 0x2e, 0x94, 0x88, 0x97, 0xee, 0x42, 0xf1, 0x4f, 0x9b, 0xed, 0x42, 0x73, 0x8c, 0xa5, 0xbb,
	0x50, 0xac, 0x68, 0xb8, 0x0b, 0xcd, 0x43, 0xd4, 0xbe, 0x9f, 0xcb, 0xb7, 0xb7, 0xc5, 0x47, 0xd5,
	0x9d, 0x6a, 0xc7, 0xca, 0x12, 0x9c, 0x3a, 0xcf, 0xf7, 0xfc, 0x2a, 0x75, 0x17, 0xe8, 0x14, 0xc6,
	0xba, 0xeb, 0xc1, 0xae, 0x1b, 0xb0, 0xf2, 0x57, 0x92, 0xe4, 0x0b, 0x3b, 0x29, 0xc0, 0x08, 0xef,
	0x7e, 0x75, 0x5a, 0x42, 0x4a, 0xf5, 0xe4, 0x8f, 0x08, 0xaf, 0x0f, 0x20, 0xe7, 0xd2, 0x07, 0x46,
	0x2d, 0x7b, 0x55, 0x23, 0x3f, 0xe0, 0xeb, 0x3d, 0x79, 0x38, 0x5b, 0x4f, 0xb7, 0x9b, 0x86, 0x4d,
	0x2f, 0xac, 0xb6, 0xb2, 0xfe, 0x80, 0xf0, 0x5a, 0xa6, 0xbc, 0x43, 0xd7, 0x10, 0xd5, 0x5d, 0xc9,
	0xc0, 0x3f, 0x23, 0xbc, 0x9e, 0x75, 0xd9, 0x96, 0xdc, 0xd2, 0x5f, 0xbe, 0x16, 0x26, 0x4e, 0x58,
	0x6d, 0xe7, 0xfe, 0x03, 0xe1, 0xcd, 0x45, 0x5e, 0xbd, 0xd3, 0xa8, 0x0f, 0x9d, 0xe8, 0x50, 0x58,
	0xe1, 0x11, 0xfc, 0xc6, 0xaf, 0x48, 0xc5, 0x23, 0xd8, 0x9b, 0x50, 0x73, 0xa5, 0xe3, 0xff, 0x8a,
	0xf0, 0xc5, 0x4c, 0xa7, 0x4b, 0x2b, 0xd1, 0xef, 0xab, 0x1b, 0xbe, 0xb7, 0xf5, 0xd6, 0x0d, 0xd3,
	0x62, 0xd1, 0x2f, 0x75, 0x77, 0xd2, 0x49, 0x98, 0x2f, 0x50, 0xab, 0x43, 0x3d, 0x4b, 0xf9, 0x6f,
	0xdf, 0x47, 0x0f, 0xcf, 0xbe, 0x65, 0x5f, 0xfd, 0x37, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x09, 0xd9,
	0x0e, 0xa8, 0x1f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DatahubServiceClient is the client API for DatahubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DatahubServiceClient interface {
	// Events --------------------------------------------------
	CreateEvents(ctx context.Context, in *events.CreateEventsRequest, opts ...grpc.CallOption) (*status.Status, error)
	ListEvents(ctx context.Context, in *events.ListEventsRequest, opts ...grpc.CallOption) (*events.ListEventsResponse, error)
	// GPU --------------------------------------------------
	CreateGpuPredictions(ctx context.Context, in *gpu.CreateGpuPredictionsRequest, opts ...grpc.CallOption) (*status.Status, error)
	ListGpus(ctx context.Context, in *gpu.ListGpusRequest, opts ...grpc.CallOption) (*gpu.ListGpusResponse, error)
	ListGpuMetrics(ctx context.Context, in *gpu.ListGpuMetricsRequest, opts ...grpc.CallOption) (*gpu.ListGpuMetricsResponse, error)
	ListGpuPredictions(ctx context.Context, in *gpu.ListGpuPredictionsRequest, opts ...grpc.CallOption) (*gpu.ListGpuPredictionsResponse, error)
	// Licenses --------------------------------------------------
	GetLicense(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*licenses.GetLicenseResponse, error)
	// Metrics --------------------------------------------------
	CreatePodMetrics(ctx context.Context, in *metrics.CreatePodMetricsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateNodeMetrics(ctx context.Context, in *metrics.CreateNodeMetricsRequest, opts ...grpc.CallOption) (*status.Status, error)
	ListPodMetrics(ctx context.Context, in *metrics.ListPodMetricsRequest, opts ...grpc.CallOption) (*metrics.ListPodMetricsResponse, error)
	ListNodeMetrics(ctx context.Context, in *metrics.ListNodeMetricsRequest, opts ...grpc.CallOption) (*metrics.ListNodeMetricsResponse, error)
	// Ping --------------------------------------------------
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*status.Status, error)
	// Plannings --------------------------------------------------
	CreatePodPlannings(ctx context.Context, in *plannings.CreatePodPlanningsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateControllerPlannings(ctx context.Context, in *plannings.CreateControllerPlanningsRequest, opts ...grpc.CallOption) (*status.Status, error)
	ListPodPlannings(ctx context.Context, in *plannings.ListPodPlanningsRequest, opts ...grpc.CallOption) (*plannings.ListPodPlanningsResponse, error)
	ListControllerPlannings(ctx context.Context, in *plannings.ListControllerPlanningsRequest, opts ...grpc.CallOption) (*plannings.ListControllerPlanningsResponse, error)
	// Predictions --------------------------------------------------
	CreateNodePredictions(ctx context.Context, in *predictions.CreateNodePredictionsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreatePodPredictions(ctx context.Context, in *predictions.CreatePodPredictionsRequest, opts ...grpc.CallOption) (*status.Status, error)
	ListNodePredictions(ctx context.Context, in *predictions.ListNodePredictionsRequest, opts ...grpc.CallOption) (*predictions.ListNodePredictionsResponse, error)
	ListPodPredictions(ctx context.Context, in *predictions.ListPodPredictionsRequest, opts ...grpc.CallOption) (*predictions.ListPodPredictionsResponse, error)
	// Rawdata --------------------------------------------------
	ReadRawdata(ctx context.Context, in *rawdata.ReadRawdataRequest, opts ...grpc.CallOption) (*rawdata.ReadRawdataResponse, error)
	WriteRawdata(ctx context.Context, in *rawdata.WriteRawdataRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Recommendations --------------------------------------------------
	CreatePodRecommendations(ctx context.Context, in *recommendations.CreatePodRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateControllerRecommendations(ctx context.Context, in *recommendations.CreateControllerRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error)
	ListPodRecommendations(ctx context.Context, in *recommendations.ListPodRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListPodRecommendationsResponse, error)
	ListAvailablePodRecommendations(ctx context.Context, in *recommendations.ListPodRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListPodRecommendationsResponse, error)
	ListControllerRecommendations(ctx context.Context, in *recommendations.ListControllerRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListControllerRecommendationsResponse, error)
	// Resources --------------------------------------------------
	// Used to list system scores
	ListSimulatedSchedulingScores(ctx context.Context, in *scores.ListSimulatedSchedulingScoresRequest, opts ...grpc.CallOption) (*scores.ListSimulatedSchedulingScoresResponse, error)
	// Used to add pods that need to be predicted
	CreatePods(ctx context.Context, in *resources.CreatePodsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateControllers(ctx context.Context, in *resources.CreateControllersRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to add nodes that need to be predicted
	CreateAlamedaNodes(ctx context.Context, in *resources.CreateAlamedaNodesRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to list pods need to be predicted
	ListAlamedaPods(ctx context.Context, in *resources.ListAlamedaPodsRequest, opts ...grpc.CallOption) (*resources.ListPodsResponse, error)
	// Used to list nodes need to be predicted
	ListAlamedaNodes(ctx context.Context, in *resources.ListAlamedaNodesRequest, opts ...grpc.CallOption) (*resources.ListNodesResponse, error)
	// Used to list nodes' information
	ListNodes(ctx context.Context, in *resources.ListNodesRequest, opts ...grpc.CallOption) (*resources.ListNodesResponse, error)
	ListControllers(ctx context.Context, in *resources.ListControllersRequest, opts ...grpc.CallOption) (*resources.ListControllersResponse, error)
	// Used to list pods by a node name
	ListPodsByNodeName(ctx context.Context, in *resources.ListPodsByNodeNamesRequest, opts ...grpc.CallOption) (*resources.ListPodsResponse, error)
	// Used to delete info of pods
	DeletePods(ctx context.Context, in *resources.DeletePodsRequest, opts ...grpc.CallOption) (*status.Status, error)
	DeleteControllers(ctx context.Context, in *resources.DeleteControllersRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to stop generating predictions for the nodes
	DeleteAlamedaNodes(ctx context.Context, in *resources.DeleteAlamedaNodesRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Scores --------------------------------------------------
	CreateSimulatedSchedulingScores(ctx context.Context, in *scores.CreateSimulatedSchedulingScoresRequest, opts ...grpc.CallOption) (*status.Status, error)
	// weave scope --------------------------------------------------
	ListWeaveScopeHosts(ctx context.Context, in *weavescope.ListWeaveScopeHostsRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error)
	GetWeaveScopeHostDetails(ctx context.Context, in *weavescope.ListWeaveScopeHostsRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error)
	ListWeaveScopePods(ctx context.Context, in *weavescope.ListWeaveScopePodsRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error)
	GetWeaveScopePodDetails(ctx context.Context, in *weavescope.ListWeaveScopePodsRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error)
	ListWeaveScopeContainers(ctx context.Context, in *weavescope.ListWeaveScopeContainersRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error)
	ListWeaveScopeContainersByHostname(ctx context.Context, in *weavescope.ListWeaveScopeContainersRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error)
	ListWeaveScopeContainersByImage(ctx context.Context, in *weavescope.ListWeaveScopeContainersRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error)
	GetWeaveScopeContainerDetails(ctx context.Context, in *weavescope.ListWeaveScopeContainersRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error)
}

type datahubServiceClient struct {
	cc *grpc.ClientConn
}

func NewDatahubServiceClient(cc *grpc.ClientConn) DatahubServiceClient {
	return &datahubServiceClient{cc}
}

func (c *datahubServiceClient) CreateEvents(ctx context.Context, in *events.CreateEventsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListEvents(ctx context.Context, in *events.ListEventsRequest, opts ...grpc.CallOption) (*events.ListEventsResponse, error) {
	out := new(events.ListEventsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateGpuPredictions(ctx context.Context, in *gpu.CreateGpuPredictionsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateGpuPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListGpus(ctx context.Context, in *gpu.ListGpusRequest, opts ...grpc.CallOption) (*gpu.ListGpusResponse, error) {
	out := new(gpu.ListGpusResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListGpus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListGpuMetrics(ctx context.Context, in *gpu.ListGpuMetricsRequest, opts ...grpc.CallOption) (*gpu.ListGpuMetricsResponse, error) {
	out := new(gpu.ListGpuMetricsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListGpuMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListGpuPredictions(ctx context.Context, in *gpu.ListGpuPredictionsRequest, opts ...grpc.CallOption) (*gpu.ListGpuPredictionsResponse, error) {
	out := new(gpu.ListGpuPredictionsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListGpuPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) GetLicense(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*licenses.GetLicenseResponse, error) {
	out := new(licenses.GetLicenseResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/GetLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreatePodMetrics(ctx context.Context, in *metrics.CreatePodMetricsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreatePodMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateNodeMetrics(ctx context.Context, in *metrics.CreateNodeMetricsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateNodeMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListPodMetrics(ctx context.Context, in *metrics.ListPodMetricsRequest, opts ...grpc.CallOption) (*metrics.ListPodMetricsResponse, error) {
	out := new(metrics.ListPodMetricsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListPodMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListNodeMetrics(ctx context.Context, in *metrics.ListNodeMetricsRequest, opts ...grpc.CallOption) (*metrics.ListNodeMetricsResponse, error) {
	out := new(metrics.ListNodeMetricsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListNodeMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreatePodPlannings(ctx context.Context, in *plannings.CreatePodPlanningsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreatePodPlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateControllerPlannings(ctx context.Context, in *plannings.CreateControllerPlanningsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateControllerPlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListPodPlannings(ctx context.Context, in *plannings.ListPodPlanningsRequest, opts ...grpc.CallOption) (*plannings.ListPodPlanningsResponse, error) {
	out := new(plannings.ListPodPlanningsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListPodPlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListControllerPlannings(ctx context.Context, in *plannings.ListControllerPlanningsRequest, opts ...grpc.CallOption) (*plannings.ListControllerPlanningsResponse, error) {
	out := new(plannings.ListControllerPlanningsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListControllerPlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateNodePredictions(ctx context.Context, in *predictions.CreateNodePredictionsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateNodePredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreatePodPredictions(ctx context.Context, in *predictions.CreatePodPredictionsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreatePodPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListNodePredictions(ctx context.Context, in *predictions.ListNodePredictionsRequest, opts ...grpc.CallOption) (*predictions.ListNodePredictionsResponse, error) {
	out := new(predictions.ListNodePredictionsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListNodePredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListPodPredictions(ctx context.Context, in *predictions.ListPodPredictionsRequest, opts ...grpc.CallOption) (*predictions.ListPodPredictionsResponse, error) {
	out := new(predictions.ListPodPredictionsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListPodPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ReadRawdata(ctx context.Context, in *rawdata.ReadRawdataRequest, opts ...grpc.CallOption) (*rawdata.ReadRawdataResponse, error) {
	out := new(rawdata.ReadRawdataResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ReadRawdata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) WriteRawdata(ctx context.Context, in *rawdata.WriteRawdataRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/WriteRawdata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreatePodRecommendations(ctx context.Context, in *recommendations.CreatePodRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreatePodRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateControllerRecommendations(ctx context.Context, in *recommendations.CreateControllerRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateControllerRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListPodRecommendations(ctx context.Context, in *recommendations.ListPodRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListPodRecommendationsResponse, error) {
	out := new(recommendations.ListPodRecommendationsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListPodRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListAvailablePodRecommendations(ctx context.Context, in *recommendations.ListPodRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListPodRecommendationsResponse, error) {
	out := new(recommendations.ListPodRecommendationsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListAvailablePodRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListControllerRecommendations(ctx context.Context, in *recommendations.ListControllerRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListControllerRecommendationsResponse, error) {
	out := new(recommendations.ListControllerRecommendationsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListControllerRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListSimulatedSchedulingScores(ctx context.Context, in *scores.ListSimulatedSchedulingScoresRequest, opts ...grpc.CallOption) (*scores.ListSimulatedSchedulingScoresResponse, error) {
	out := new(scores.ListSimulatedSchedulingScoresResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListSimulatedSchedulingScores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreatePods(ctx context.Context, in *resources.CreatePodsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreatePods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateControllers(ctx context.Context, in *resources.CreateControllersRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateControllers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateAlamedaNodes(ctx context.Context, in *resources.CreateAlamedaNodesRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateAlamedaNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListAlamedaPods(ctx context.Context, in *resources.ListAlamedaPodsRequest, opts ...grpc.CallOption) (*resources.ListPodsResponse, error) {
	out := new(resources.ListPodsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListAlamedaPods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListAlamedaNodes(ctx context.Context, in *resources.ListAlamedaNodesRequest, opts ...grpc.CallOption) (*resources.ListNodesResponse, error) {
	out := new(resources.ListNodesResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListAlamedaNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListNodes(ctx context.Context, in *resources.ListNodesRequest, opts ...grpc.CallOption) (*resources.ListNodesResponse, error) {
	out := new(resources.ListNodesResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListControllers(ctx context.Context, in *resources.ListControllersRequest, opts ...grpc.CallOption) (*resources.ListControllersResponse, error) {
	out := new(resources.ListControllersResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListControllers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListPodsByNodeName(ctx context.Context, in *resources.ListPodsByNodeNamesRequest, opts ...grpc.CallOption) (*resources.ListPodsResponse, error) {
	out := new(resources.ListPodsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListPodsByNodeName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) DeletePods(ctx context.Context, in *resources.DeletePodsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/DeletePods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) DeleteControllers(ctx context.Context, in *resources.DeleteControllersRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/DeleteControllers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) DeleteAlamedaNodes(ctx context.Context, in *resources.DeleteAlamedaNodesRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/DeleteAlamedaNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateSimulatedSchedulingScores(ctx context.Context, in *scores.CreateSimulatedSchedulingScoresRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateSimulatedSchedulingScores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListWeaveScopeHosts(ctx context.Context, in *weavescope.ListWeaveScopeHostsRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error) {
	out := new(weavescope.WeaveScopeResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListWeaveScopeHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) GetWeaveScopeHostDetails(ctx context.Context, in *weavescope.ListWeaveScopeHostsRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error) {
	out := new(weavescope.WeaveScopeResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/GetWeaveScopeHostDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListWeaveScopePods(ctx context.Context, in *weavescope.ListWeaveScopePodsRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error) {
	out := new(weavescope.WeaveScopeResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListWeaveScopePods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) GetWeaveScopePodDetails(ctx context.Context, in *weavescope.ListWeaveScopePodsRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error) {
	out := new(weavescope.WeaveScopeResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/GetWeaveScopePodDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListWeaveScopeContainers(ctx context.Context, in *weavescope.ListWeaveScopeContainersRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error) {
	out := new(weavescope.WeaveScopeResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListWeaveScopeContainers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListWeaveScopeContainersByHostname(ctx context.Context, in *weavescope.ListWeaveScopeContainersRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error) {
	out := new(weavescope.WeaveScopeResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListWeaveScopeContainersByHostname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListWeaveScopeContainersByImage(ctx context.Context, in *weavescope.ListWeaveScopeContainersRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error) {
	out := new(weavescope.WeaveScopeResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListWeaveScopeContainersByImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) GetWeaveScopeContainerDetails(ctx context.Context, in *weavescope.ListWeaveScopeContainersRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error) {
	out := new(weavescope.WeaveScopeResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/GetWeaveScopeContainerDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatahubServiceServer is the server API for DatahubService service.
type DatahubServiceServer interface {
	// Events --------------------------------------------------
	CreateEvents(context.Context, *events.CreateEventsRequest) (*status.Status, error)
	ListEvents(context.Context, *events.ListEventsRequest) (*events.ListEventsResponse, error)
	// GPU --------------------------------------------------
	CreateGpuPredictions(context.Context, *gpu.CreateGpuPredictionsRequest) (*status.Status, error)
	ListGpus(context.Context, *gpu.ListGpusRequest) (*gpu.ListGpusResponse, error)
	ListGpuMetrics(context.Context, *gpu.ListGpuMetricsRequest) (*gpu.ListGpuMetricsResponse, error)
	ListGpuPredictions(context.Context, *gpu.ListGpuPredictionsRequest) (*gpu.ListGpuPredictionsResponse, error)
	// Licenses --------------------------------------------------
	GetLicense(context.Context, *empty.Empty) (*licenses.GetLicenseResponse, error)
	// Metrics --------------------------------------------------
	CreatePodMetrics(context.Context, *metrics.CreatePodMetricsRequest) (*status.Status, error)
	CreateNodeMetrics(context.Context, *metrics.CreateNodeMetricsRequest) (*status.Status, error)
	ListPodMetrics(context.Context, *metrics.ListPodMetricsRequest) (*metrics.ListPodMetricsResponse, error)
	ListNodeMetrics(context.Context, *metrics.ListNodeMetricsRequest) (*metrics.ListNodeMetricsResponse, error)
	// Ping --------------------------------------------------
	Ping(context.Context, *empty.Empty) (*status.Status, error)
	// Plannings --------------------------------------------------
	CreatePodPlannings(context.Context, *plannings.CreatePodPlanningsRequest) (*status.Status, error)
	CreateControllerPlannings(context.Context, *plannings.CreateControllerPlanningsRequest) (*status.Status, error)
	ListPodPlannings(context.Context, *plannings.ListPodPlanningsRequest) (*plannings.ListPodPlanningsResponse, error)
	ListControllerPlannings(context.Context, *plannings.ListControllerPlanningsRequest) (*plannings.ListControllerPlanningsResponse, error)
	// Predictions --------------------------------------------------
	CreateNodePredictions(context.Context, *predictions.CreateNodePredictionsRequest) (*status.Status, error)
	CreatePodPredictions(context.Context, *predictions.CreatePodPredictionsRequest) (*status.Status, error)
	ListNodePredictions(context.Context, *predictions.ListNodePredictionsRequest) (*predictions.ListNodePredictionsResponse, error)
	ListPodPredictions(context.Context, *predictions.ListPodPredictionsRequest) (*predictions.ListPodPredictionsResponse, error)
	// Rawdata --------------------------------------------------
	ReadRawdata(context.Context, *rawdata.ReadRawdataRequest) (*rawdata.ReadRawdataResponse, error)
	WriteRawdata(context.Context, *rawdata.WriteRawdataRequest) (*status.Status, error)
	// Recommendations --------------------------------------------------
	CreatePodRecommendations(context.Context, *recommendations.CreatePodRecommendationsRequest) (*status.Status, error)
	CreateControllerRecommendations(context.Context, *recommendations.CreateControllerRecommendationsRequest) (*status.Status, error)
	ListPodRecommendations(context.Context, *recommendations.ListPodRecommendationsRequest) (*recommendations.ListPodRecommendationsResponse, error)
	ListAvailablePodRecommendations(context.Context, *recommendations.ListPodRecommendationsRequest) (*recommendations.ListPodRecommendationsResponse, error)
	ListControllerRecommendations(context.Context, *recommendations.ListControllerRecommendationsRequest) (*recommendations.ListControllerRecommendationsResponse, error)
	// Resources --------------------------------------------------
	// Used to list system scores
	ListSimulatedSchedulingScores(context.Context, *scores.ListSimulatedSchedulingScoresRequest) (*scores.ListSimulatedSchedulingScoresResponse, error)
	// Used to add pods that need to be predicted
	CreatePods(context.Context, *resources.CreatePodsRequest) (*status.Status, error)
	CreateControllers(context.Context, *resources.CreateControllersRequest) (*status.Status, error)
	// Used to add nodes that need to be predicted
	CreateAlamedaNodes(context.Context, *resources.CreateAlamedaNodesRequest) (*status.Status, error)
	// Used to list pods need to be predicted
	ListAlamedaPods(context.Context, *resources.ListAlamedaPodsRequest) (*resources.ListPodsResponse, error)
	// Used to list nodes need to be predicted
	ListAlamedaNodes(context.Context, *resources.ListAlamedaNodesRequest) (*resources.ListNodesResponse, error)
	// Used to list nodes' information
	ListNodes(context.Context, *resources.ListNodesRequest) (*resources.ListNodesResponse, error)
	ListControllers(context.Context, *resources.ListControllersRequest) (*resources.ListControllersResponse, error)
	// Used to list pods by a node name
	ListPodsByNodeName(context.Context, *resources.ListPodsByNodeNamesRequest) (*resources.ListPodsResponse, error)
	// Used to delete info of pods
	DeletePods(context.Context, *resources.DeletePodsRequest) (*status.Status, error)
	DeleteControllers(context.Context, *resources.DeleteControllersRequest) (*status.Status, error)
	// Used to stop generating predictions for the nodes
	DeleteAlamedaNodes(context.Context, *resources.DeleteAlamedaNodesRequest) (*status.Status, error)
	// Scores --------------------------------------------------
	CreateSimulatedSchedulingScores(context.Context, *scores.CreateSimulatedSchedulingScoresRequest) (*status.Status, error)
	// weave scope --------------------------------------------------
	ListWeaveScopeHosts(context.Context, *weavescope.ListWeaveScopeHostsRequest) (*weavescope.WeaveScopeResponse, error)
	GetWeaveScopeHostDetails(context.Context, *weavescope.ListWeaveScopeHostsRequest) (*weavescope.WeaveScopeResponse, error)
	ListWeaveScopePods(context.Context, *weavescope.ListWeaveScopePodsRequest) (*weavescope.WeaveScopeResponse, error)
	GetWeaveScopePodDetails(context.Context, *weavescope.ListWeaveScopePodsRequest) (*weavescope.WeaveScopeResponse, error)
	ListWeaveScopeContainers(context.Context, *weavescope.ListWeaveScopeContainersRequest) (*weavescope.WeaveScopeResponse, error)
	ListWeaveScopeContainersByHostname(context.Context, *weavescope.ListWeaveScopeContainersRequest) (*weavescope.WeaveScopeResponse, error)
	ListWeaveScopeContainersByImage(context.Context, *weavescope.ListWeaveScopeContainersRequest) (*weavescope.WeaveScopeResponse, error)
	GetWeaveScopeContainerDetails(context.Context, *weavescope.ListWeaveScopeContainersRequest) (*weavescope.WeaveScopeResponse, error)
}

// UnimplementedDatahubServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDatahubServiceServer struct {
}

func (*UnimplementedDatahubServiceServer) CreateEvents(ctx context.Context, req *events.CreateEventsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateEvents not implemented")
}
func (*UnimplementedDatahubServiceServer) ListEvents(ctx context.Context, req *events.ListEventsRequest) (*events.ListEventsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateGpuPredictions(ctx context.Context, req *gpu.CreateGpuPredictionsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateGpuPredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) ListGpus(ctx context.Context, req *gpu.ListGpusRequest) (*gpu.ListGpusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListGpus not implemented")
}
func (*UnimplementedDatahubServiceServer) ListGpuMetrics(ctx context.Context, req *gpu.ListGpuMetricsRequest) (*gpu.ListGpuMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListGpuMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) ListGpuPredictions(ctx context.Context, req *gpu.ListGpuPredictionsRequest) (*gpu.ListGpuPredictionsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListGpuPredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) GetLicense(ctx context.Context, req *empty.Empty) (*licenses.GetLicenseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetLicense not implemented")
}
func (*UnimplementedDatahubServiceServer) CreatePodMetrics(ctx context.Context, req *metrics.CreatePodMetricsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreatePodMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateNodeMetrics(ctx context.Context, req *metrics.CreateNodeMetricsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateNodeMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) ListPodMetrics(ctx context.Context, req *metrics.ListPodMetricsRequest) (*metrics.ListPodMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListPodMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) ListNodeMetrics(ctx context.Context, req *metrics.ListNodeMetricsRequest) (*metrics.ListNodeMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNodeMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) Ping(ctx context.Context, req *empty.Empty) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedDatahubServiceServer) CreatePodPlannings(ctx context.Context, req *plannings.CreatePodPlanningsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreatePodPlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateControllerPlannings(ctx context.Context, req *plannings.CreateControllerPlanningsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateControllerPlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) ListPodPlannings(ctx context.Context, req *plannings.ListPodPlanningsRequest) (*plannings.ListPodPlanningsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListPodPlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) ListControllerPlannings(ctx context.Context, req *plannings.ListControllerPlanningsRequest) (*plannings.ListControllerPlanningsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListControllerPlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateNodePredictions(ctx context.Context, req *predictions.CreateNodePredictionsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateNodePredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) CreatePodPredictions(ctx context.Context, req *predictions.CreatePodPredictionsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreatePodPredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) ListNodePredictions(ctx context.Context, req *predictions.ListNodePredictionsRequest) (*predictions.ListNodePredictionsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNodePredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) ListPodPredictions(ctx context.Context, req *predictions.ListPodPredictionsRequest) (*predictions.ListPodPredictionsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListPodPredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) ReadRawdata(ctx context.Context, req *rawdata.ReadRawdataRequest) (*rawdata.ReadRawdataResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ReadRawdata not implemented")
}
func (*UnimplementedDatahubServiceServer) WriteRawdata(ctx context.Context, req *rawdata.WriteRawdataRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method WriteRawdata not implemented")
}
func (*UnimplementedDatahubServiceServer) CreatePodRecommendations(ctx context.Context, req *recommendations.CreatePodRecommendationsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreatePodRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateControllerRecommendations(ctx context.Context, req *recommendations.CreateControllerRecommendationsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateControllerRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) ListPodRecommendations(ctx context.Context, req *recommendations.ListPodRecommendationsRequest) (*recommendations.ListPodRecommendationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListPodRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) ListAvailablePodRecommendations(ctx context.Context, req *recommendations.ListPodRecommendationsRequest) (*recommendations.ListPodRecommendationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAvailablePodRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) ListControllerRecommendations(ctx context.Context, req *recommendations.ListControllerRecommendationsRequest) (*recommendations.ListControllerRecommendationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListControllerRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) ListSimulatedSchedulingScores(ctx context.Context, req *scores.ListSimulatedSchedulingScoresRequest) (*scores.ListSimulatedSchedulingScoresResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListSimulatedSchedulingScores not implemented")
}
func (*UnimplementedDatahubServiceServer) CreatePods(ctx context.Context, req *resources.CreatePodsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreatePods not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateControllers(ctx context.Context, req *resources.CreateControllersRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateControllers not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateAlamedaNodes(ctx context.Context, req *resources.CreateAlamedaNodesRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateAlamedaNodes not implemented")
}
func (*UnimplementedDatahubServiceServer) ListAlamedaPods(ctx context.Context, req *resources.ListAlamedaPodsRequest) (*resources.ListPodsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAlamedaPods not implemented")
}
func (*UnimplementedDatahubServiceServer) ListAlamedaNodes(ctx context.Context, req *resources.ListAlamedaNodesRequest) (*resources.ListNodesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAlamedaNodes not implemented")
}
func (*UnimplementedDatahubServiceServer) ListNodes(ctx context.Context, req *resources.ListNodesRequest) (*resources.ListNodesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (*UnimplementedDatahubServiceServer) ListControllers(ctx context.Context, req *resources.ListControllersRequest) (*resources.ListControllersResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListControllers not implemented")
}
func (*UnimplementedDatahubServiceServer) ListPodsByNodeName(ctx context.Context, req *resources.ListPodsByNodeNamesRequest) (*resources.ListPodsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListPodsByNodeName not implemented")
}
func (*UnimplementedDatahubServiceServer) DeletePods(ctx context.Context, req *resources.DeletePodsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeletePods not implemented")
}
func (*UnimplementedDatahubServiceServer) DeleteControllers(ctx context.Context, req *resources.DeleteControllersRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteControllers not implemented")
}
func (*UnimplementedDatahubServiceServer) DeleteAlamedaNodes(ctx context.Context, req *resources.DeleteAlamedaNodesRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteAlamedaNodes not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateSimulatedSchedulingScores(ctx context.Context, req *scores.CreateSimulatedSchedulingScoresRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateSimulatedSchedulingScores not implemented")
}
func (*UnimplementedDatahubServiceServer) ListWeaveScopeHosts(ctx context.Context, req *weavescope.ListWeaveScopeHostsRequest) (*weavescope.WeaveScopeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWeaveScopeHosts not implemented")
}
func (*UnimplementedDatahubServiceServer) GetWeaveScopeHostDetails(ctx context.Context, req *weavescope.ListWeaveScopeHostsRequest) (*weavescope.WeaveScopeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetWeaveScopeHostDetails not implemented")
}
func (*UnimplementedDatahubServiceServer) ListWeaveScopePods(ctx context.Context, req *weavescope.ListWeaveScopePodsRequest) (*weavescope.WeaveScopeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWeaveScopePods not implemented")
}
func (*UnimplementedDatahubServiceServer) GetWeaveScopePodDetails(ctx context.Context, req *weavescope.ListWeaveScopePodsRequest) (*weavescope.WeaveScopeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetWeaveScopePodDetails not implemented")
}
func (*UnimplementedDatahubServiceServer) ListWeaveScopeContainers(ctx context.Context, req *weavescope.ListWeaveScopeContainersRequest) (*weavescope.WeaveScopeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWeaveScopeContainers not implemented")
}
func (*UnimplementedDatahubServiceServer) ListWeaveScopeContainersByHostname(ctx context.Context, req *weavescope.ListWeaveScopeContainersRequest) (*weavescope.WeaveScopeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWeaveScopeContainersByHostname not implemented")
}
func (*UnimplementedDatahubServiceServer) ListWeaveScopeContainersByImage(ctx context.Context, req *weavescope.ListWeaveScopeContainersRequest) (*weavescope.WeaveScopeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWeaveScopeContainersByImage not implemented")
}
func (*UnimplementedDatahubServiceServer) GetWeaveScopeContainerDetails(ctx context.Context, req *weavescope.ListWeaveScopeContainersRequest) (*weavescope.WeaveScopeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetWeaveScopeContainerDetails not implemented")
}

func RegisterDatahubServiceServer(s *grpc.Server, srv DatahubServiceServer) {
	s.RegisterService(&_DatahubService_serviceDesc, srv)
}

func _DatahubService_CreateEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(events.CreateEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateEvents(ctx, req.(*events.CreateEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(events.ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListEvents(ctx, req.(*events.ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateGpuPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gpu.CreateGpuPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateGpuPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateGpuPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateGpuPredictions(ctx, req.(*gpu.CreateGpuPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListGpus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gpu.ListGpusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListGpus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListGpus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListGpus(ctx, req.(*gpu.ListGpusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListGpuMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gpu.ListGpuMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListGpuMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListGpuMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListGpuMetrics(ctx, req.(*gpu.ListGpuMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListGpuPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gpu.ListGpuPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListGpuPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListGpuPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListGpuPredictions(ctx, req.(*gpu.ListGpuPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_GetLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).GetLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/GetLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).GetLicense(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreatePodMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.CreatePodMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreatePodMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreatePodMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreatePodMetrics(ctx, req.(*metrics.CreatePodMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateNodeMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.CreateNodeMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateNodeMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateNodeMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateNodeMetrics(ctx, req.(*metrics.CreateNodeMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListPodMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.ListPodMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListPodMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListPodMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListPodMetrics(ctx, req.(*metrics.ListPodMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListNodeMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.ListNodeMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListNodeMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListNodeMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListNodeMetrics(ctx, req.(*metrics.ListNodeMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreatePodPlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.CreatePodPlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreatePodPlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreatePodPlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreatePodPlannings(ctx, req.(*plannings.CreatePodPlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateControllerPlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.CreateControllerPlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateControllerPlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateControllerPlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateControllerPlannings(ctx, req.(*plannings.CreateControllerPlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListPodPlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.ListPodPlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListPodPlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListPodPlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListPodPlannings(ctx, req.(*plannings.ListPodPlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListControllerPlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.ListControllerPlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListControllerPlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListControllerPlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListControllerPlannings(ctx, req.(*plannings.ListControllerPlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateNodePredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.CreateNodePredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateNodePredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateNodePredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateNodePredictions(ctx, req.(*predictions.CreateNodePredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreatePodPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.CreatePodPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreatePodPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreatePodPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreatePodPredictions(ctx, req.(*predictions.CreatePodPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListNodePredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.ListNodePredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListNodePredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListNodePredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListNodePredictions(ctx, req.(*predictions.ListNodePredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListPodPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.ListPodPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListPodPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListPodPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListPodPredictions(ctx, req.(*predictions.ListPodPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ReadRawdata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rawdata.ReadRawdataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ReadRawdata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ReadRawdata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ReadRawdata(ctx, req.(*rawdata.ReadRawdataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_WriteRawdata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rawdata.WriteRawdataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).WriteRawdata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/WriteRawdata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).WriteRawdata(ctx, req.(*rawdata.WriteRawdataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreatePodRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.CreatePodRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreatePodRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreatePodRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreatePodRecommendations(ctx, req.(*recommendations.CreatePodRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateControllerRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.CreateControllerRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateControllerRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateControllerRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateControllerRecommendations(ctx, req.(*recommendations.CreateControllerRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListPodRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.ListPodRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListPodRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListPodRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListPodRecommendations(ctx, req.(*recommendations.ListPodRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListAvailablePodRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.ListPodRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListAvailablePodRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListAvailablePodRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListAvailablePodRecommendations(ctx, req.(*recommendations.ListPodRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListControllerRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.ListControllerRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListControllerRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListControllerRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListControllerRecommendations(ctx, req.(*recommendations.ListControllerRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListSimulatedSchedulingScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(scores.ListSimulatedSchedulingScoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListSimulatedSchedulingScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListSimulatedSchedulingScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListSimulatedSchedulingScores(ctx, req.(*scores.ListSimulatedSchedulingScoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreatePods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreatePodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreatePods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreatePods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreatePods(ctx, req.(*resources.CreatePodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateControllers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateControllersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateControllers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateControllers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateControllers(ctx, req.(*resources.CreateControllersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateAlamedaNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateAlamedaNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateAlamedaNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateAlamedaNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateAlamedaNodes(ctx, req.(*resources.CreateAlamedaNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListAlamedaPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ListAlamedaPodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListAlamedaPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListAlamedaPods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListAlamedaPods(ctx, req.(*resources.ListAlamedaPodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListAlamedaNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ListAlamedaNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListAlamedaNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListAlamedaNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListAlamedaNodes(ctx, req.(*resources.ListAlamedaNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListNodes(ctx, req.(*resources.ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListControllers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ListControllersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListControllers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListControllers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListControllers(ctx, req.(*resources.ListControllersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListPodsByNodeName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ListPodsByNodeNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListPodsByNodeName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListPodsByNodeName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListPodsByNodeName(ctx, req.(*resources.ListPodsByNodeNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_DeletePods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeletePodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).DeletePods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/DeletePods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).DeletePods(ctx, req.(*resources.DeletePodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_DeleteControllers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteControllersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).DeleteControllers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/DeleteControllers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).DeleteControllers(ctx, req.(*resources.DeleteControllersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_DeleteAlamedaNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteAlamedaNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).DeleteAlamedaNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/DeleteAlamedaNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).DeleteAlamedaNodes(ctx, req.(*resources.DeleteAlamedaNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateSimulatedSchedulingScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(scores.CreateSimulatedSchedulingScoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateSimulatedSchedulingScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateSimulatedSchedulingScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateSimulatedSchedulingScores(ctx, req.(*scores.CreateSimulatedSchedulingScoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListWeaveScopeHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(weavescope.ListWeaveScopeHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListWeaveScopeHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListWeaveScopeHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListWeaveScopeHosts(ctx, req.(*weavescope.ListWeaveScopeHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_GetWeaveScopeHostDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(weavescope.ListWeaveScopeHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).GetWeaveScopeHostDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/GetWeaveScopeHostDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).GetWeaveScopeHostDetails(ctx, req.(*weavescope.ListWeaveScopeHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListWeaveScopePods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(weavescope.ListWeaveScopePodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListWeaveScopePods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListWeaveScopePods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListWeaveScopePods(ctx, req.(*weavescope.ListWeaveScopePodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_GetWeaveScopePodDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(weavescope.ListWeaveScopePodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).GetWeaveScopePodDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/GetWeaveScopePodDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).GetWeaveScopePodDetails(ctx, req.(*weavescope.ListWeaveScopePodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListWeaveScopeContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(weavescope.ListWeaveScopeContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListWeaveScopeContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListWeaveScopeContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListWeaveScopeContainers(ctx, req.(*weavescope.ListWeaveScopeContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListWeaveScopeContainersByHostname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(weavescope.ListWeaveScopeContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListWeaveScopeContainersByHostname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListWeaveScopeContainersByHostname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListWeaveScopeContainersByHostname(ctx, req.(*weavescope.ListWeaveScopeContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListWeaveScopeContainersByImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(weavescope.ListWeaveScopeContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListWeaveScopeContainersByImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListWeaveScopeContainersByImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListWeaveScopeContainersByImage(ctx, req.(*weavescope.ListWeaveScopeContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_GetWeaveScopeContainerDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(weavescope.ListWeaveScopeContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).GetWeaveScopeContainerDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/GetWeaveScopeContainerDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).GetWeaveScopeContainerDetails(ctx, req.(*weavescope.ListWeaveScopeContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DatahubService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "containersai.alameda.v1alpha1.datahub.DatahubService",
	HandlerType: (*DatahubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEvents",
			Handler:    _DatahubService_CreateEvents_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _DatahubService_ListEvents_Handler,
		},
		{
			MethodName: "CreateGpuPredictions",
			Handler:    _DatahubService_CreateGpuPredictions_Handler,
		},
		{
			MethodName: "ListGpus",
			Handler:    _DatahubService_ListGpus_Handler,
		},
		{
			MethodName: "ListGpuMetrics",
			Handler:    _DatahubService_ListGpuMetrics_Handler,
		},
		{
			MethodName: "ListGpuPredictions",
			Handler:    _DatahubService_ListGpuPredictions_Handler,
		},
		{
			MethodName: "GetLicense",
			Handler:    _DatahubService_GetLicense_Handler,
		},
		{
			MethodName: "CreatePodMetrics",
			Handler:    _DatahubService_CreatePodMetrics_Handler,
		},
		{
			MethodName: "CreateNodeMetrics",
			Handler:    _DatahubService_CreateNodeMetrics_Handler,
		},
		{
			MethodName: "ListPodMetrics",
			Handler:    _DatahubService_ListPodMetrics_Handler,
		},
		{
			MethodName: "ListNodeMetrics",
			Handler:    _DatahubService_ListNodeMetrics_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _DatahubService_Ping_Handler,
		},
		{
			MethodName: "CreatePodPlannings",
			Handler:    _DatahubService_CreatePodPlannings_Handler,
		},
		{
			MethodName: "CreateControllerPlannings",
			Handler:    _DatahubService_CreateControllerPlannings_Handler,
		},
		{
			MethodName: "ListPodPlannings",
			Handler:    _DatahubService_ListPodPlannings_Handler,
		},
		{
			MethodName: "ListControllerPlannings",
			Handler:    _DatahubService_ListControllerPlannings_Handler,
		},
		{
			MethodName: "CreateNodePredictions",
			Handler:    _DatahubService_CreateNodePredictions_Handler,
		},
		{
			MethodName: "CreatePodPredictions",
			Handler:    _DatahubService_CreatePodPredictions_Handler,
		},
		{
			MethodName: "ListNodePredictions",
			Handler:    _DatahubService_ListNodePredictions_Handler,
		},
		{
			MethodName: "ListPodPredictions",
			Handler:    _DatahubService_ListPodPredictions_Handler,
		},
		{
			MethodName: "ReadRawdata",
			Handler:    _DatahubService_ReadRawdata_Handler,
		},
		{
			MethodName: "WriteRawdata",
			Handler:    _DatahubService_WriteRawdata_Handler,
		},
		{
			MethodName: "CreatePodRecommendations",
			Handler:    _DatahubService_CreatePodRecommendations_Handler,
		},
		{
			MethodName: "CreateControllerRecommendations",
			Handler:    _DatahubService_CreateControllerRecommendations_Handler,
		},
		{
			MethodName: "ListPodRecommendations",
			Handler:    _DatahubService_ListPodRecommendations_Handler,
		},
		{
			MethodName: "ListAvailablePodRecommendations",
			Handler:    _DatahubService_ListAvailablePodRecommendations_Handler,
		},
		{
			MethodName: "ListControllerRecommendations",
			Handler:    _DatahubService_ListControllerRecommendations_Handler,
		},
		{
			MethodName: "ListSimulatedSchedulingScores",
			Handler:    _DatahubService_ListSimulatedSchedulingScores_Handler,
		},
		{
			MethodName: "CreatePods",
			Handler:    _DatahubService_CreatePods_Handler,
		},
		{
			MethodName: "CreateControllers",
			Handler:    _DatahubService_CreateControllers_Handler,
		},
		{
			MethodName: "CreateAlamedaNodes",
			Handler:    _DatahubService_CreateAlamedaNodes_Handler,
		},
		{
			MethodName: "ListAlamedaPods",
			Handler:    _DatahubService_ListAlamedaPods_Handler,
		},
		{
			MethodName: "ListAlamedaNodes",
			Handler:    _DatahubService_ListAlamedaNodes_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _DatahubService_ListNodes_Handler,
		},
		{
			MethodName: "ListControllers",
			Handler:    _DatahubService_ListControllers_Handler,
		},
		{
			MethodName: "ListPodsByNodeName",
			Handler:    _DatahubService_ListPodsByNodeName_Handler,
		},
		{
			MethodName: "DeletePods",
			Handler:    _DatahubService_DeletePods_Handler,
		},
		{
			MethodName: "DeleteControllers",
			Handler:    _DatahubService_DeleteControllers_Handler,
		},
		{
			MethodName: "DeleteAlamedaNodes",
			Handler:    _DatahubService_DeleteAlamedaNodes_Handler,
		},
		{
			MethodName: "CreateSimulatedSchedulingScores",
			Handler:    _DatahubService_CreateSimulatedSchedulingScores_Handler,
		},
		{
			MethodName: "ListWeaveScopeHosts",
			Handler:    _DatahubService_ListWeaveScopeHosts_Handler,
		},
		{
			MethodName: "GetWeaveScopeHostDetails",
			Handler:    _DatahubService_GetWeaveScopeHostDetails_Handler,
		},
		{
			MethodName: "ListWeaveScopePods",
			Handler:    _DatahubService_ListWeaveScopePods_Handler,
		},
		{
			MethodName: "GetWeaveScopePodDetails",
			Handler:    _DatahubService_GetWeaveScopePodDetails_Handler,
		},
		{
			MethodName: "ListWeaveScopeContainers",
			Handler:    _DatahubService_ListWeaveScopeContainers_Handler,
		},
		{
			MethodName: "ListWeaveScopeContainersByHostname",
			Handler:    _DatahubService_ListWeaveScopeContainersByHostname_Handler,
		},
		{
			MethodName: "ListWeaveScopeContainersByImage",
			Handler:    _DatahubService_ListWeaveScopeContainersByImage_Handler,
		},
		{
			MethodName: "GetWeaveScopeContainerDetails",
			Handler:    _DatahubService_GetWeaveScopeContainerDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "alameda_api/v1alpha1/datahub/server.proto",
}
